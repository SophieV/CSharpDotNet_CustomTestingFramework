<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="TestMVC4App.Models" #>
<#@ parameter 
	name="SummaryReportDataObject" 
	type="TestMVC4App.Templates.SharedSummaryReportData" #>
<html>
<head></head>
<body>
	<h1>Overview Report</h1>
	<hr/>
	<h2>Global</h2>
	<p>Count of user profiles tested : <#= SummaryReportDataObject.CountProfilesTested.ToString("d", CultureInfo.InvariantCulture) #><br/>
	Total count of tests run : <#= SummaryReportDataObject.CountTestsRun.ToString("d", CultureInfo.InvariantCulture) #><br/>
	Count of tests per user profile : <#= SummaryReportDataObject.CountTestsPerUser.ToString("d", CultureInfo.InvariantCulture) #><br/>
	Count of user profiles free from any kind of warning : <#= SummaryReportDataObject.CountProfilesWithoutWarnings.ToString("d", CultureInfo.InvariantCulture) #></p>
	<br/>
	<table style="border:solid 2px lightgrey;border-collapse:collapse;">
		<tr>
		<th style="background-color:lightgrey;">Severity of Failure</th>
		<th style="background-color:lightgrey;">Count</th>
		<th style="background-color:lightgrey;">Description of the category</th>
		</tr>
		<# foreach (KeyValuePair<SeverityState,int> countPerSeverityState in SummaryReportDataObject.OverviewCountBySeverityState) { #>
		<tr>
			<# switch (countPerSeverityState.Key) {
			case SeverityState.FALSE_POSITIVE : #>
		<td style="padding: 10px;background-color: green;color:white;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverityState.Key #>
			<# break;
			case SeverityState.WARNING: #>
		<td style="padding: 10px;background-color: beige;color:black;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverityState.Key #>
			<# break;
			case SeverityState.ERROR_WITH_EXPLANATION: #>
		<td style="padding: 10px;background-color: orange;color:white;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverityState.Key #>
			<# break;
			case SeverityState.ERROR: #>
		<td style="padding: 10px;background-color: Red;color:white;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverityState.Key #>
			<# break;
			default: #>
		<td style="padding: 10px;color:black;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverityState.Key #>
			<# break;
		} #>
		</td>
		<td style="padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;"><#= countPerSeverityState.Value.ToString("d", CultureInfo.InvariantCulture) #></td>
		<td style="padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;color:darkgrey;"><#= LogManager.GetDescription(countPerSeverityState.Key) #></td>
	</tr>
	<# } #>
	</table>
	<br/>
	<p>There is a one-to-one relationship between a Failure and a user profile. A given test is run once for the given user profile.</p>
	<br/>
	<table style="border:solid 2px lightgrey;border-collapse:collapse;">
	<tr>
		<th style="background-color:lightgrey;">Observation Type</th>
		<th style="background-color:lightgrey;">Count</th>
	</tr>
	<# var sortedDictionary = SummaryReportDataObject.OverviewCountByObservationType.OrderByDescending(x => x.Value).ToDictionary(x => x.Key, x => x.Value);
	foreach (KeyValuePair<ObservationLabel,int> countPerObservationType in sortedDictionary) {
		if(countPerObservationType.Value > 0) { #>
	<tr>
		<td style="padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;"><#= LogManager.GetDescription(countPerObservationType.Key) #></td>
		<td style="padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;"><#= countPerObservationType.Value.ToString("d", CultureInfo.InvariantCulture) #></td>
	</tr>
	<# } } #>
	</table>
	<br/>
	<p>There is no straightforward relationship between an observation and a Failure. An observation is made regardless of the test result. 
	A given observation can only be made once for a given test on a given user profile.</p>
	<br/>
	<br/>
	<hr/>
	<table style="border:solid 2px lightgrey;border-collapse:collapse;">
	<tr>
	<th style="background-color:lightgrey;">Test Name</th>
	<th style="background-color:lightgrey;">Success</th>
	<th style="background-color:lightgrey;">Sample Data</th>
	<th style="background-color:lightgrey;">More Info</th>
	</tr>
	<# foreach (string testName in SummaryReportDataObject.TestNames) { #>
		<# foreach (KeyValuePair<SeverityState,int> countPerSeverityState in SummaryReportDataObject.ByTestNameCountBySeverityState[testName]) { #>
	<tr>
		<# if(countPerSeverityState.Key == SeverityState.SUCCESS) { #>
		<td style="padding: 10px;color:black;border-width:2px;border-color:lightgrey;border-style:solid;"><#= testName #></td>
		<td style="padding: 10px;color:black;border-width:2px;border-color:lightgrey;border-style:solid;">
			<# double frequency2 = (double)countPerSeverityState.Value /(double) SummaryReportDataObject.CountProfilesTested; #>
			<#= frequency2.ToString("P") #>
		</td>
		<td style="padding: 10px;color:black;border-width:2px;border-color:lightgrey;border-style:solid;width: 40%;">
			<# if(SummaryReportDataObject.SampleDataByTestName.ContainsKey(testName)) { #>
			<#= SummaryReportDataObject.SampleDataByTestName[testName] #>
			<# } #>
		</td> 
		<td style="padding: 10px;color:black;border-width:2px;border-color:lightgrey;border-style:solid;">
			<a href="#<#= testName #>">Test Overview</a><br/>
			<a href="C:\\QA_LOGS\\<#= testName #>_1.html">Test Details</a>
		</td>
	<# } } #>
	</tr>
	<# } #>
	</table>
	<br/>
	<p>Success means no error and no warning returned.</p>
	<# foreach (string testName in SummaryReportDataObject.TestNames) { #>
	<hr/>
	<h2><a id="#<#= testName #>"><#= testName #></a></h2>
	<table style="border:solid 2px lightgrey;border-collapse:collapse;">
	<tr>
		<th style="background-color:lightgrey;">Severity of Failure</th>
		<th style="background-color:lightgrey;">Count</th>
		<th style="background-color:lightgrey;">Frequency</th>
	</tr>
	<# foreach (KeyValuePair<SeverityState,int> countPerSeverityState in SummaryReportDataObject.ByTestNameCountBySeverityState[testName]) { #>
	<tr>
	<# switch (countPerSeverityState.Key) {
		case SeverityState.FALSE_POSITIVE : #>
		<td style="padding: 10px;background-color: green;color:white;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverityState.Key #>
		<# break;
		case SeverityState.WARNING: #>
		<td style="padding: 10px;background-color: beige;color:black;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverityState.Key #>
		<# break;
		case SeverityState.ERROR_WITH_EXPLANATION: #>
		<td style="padding: 10px;background-color: orange;color:white;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverityState.Key #>
		<# break;
		case SeverityState.ERROR: #>
		<td style="padding: 10px;background-color: Red;color:white;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverityState.Key #>
		<# break;
		default: #>
		<td style="padding: 10px;color:black;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverityState.Key #>
		<# break;
	} #>
		</td>
		<td style="padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;"><#= countPerSeverityState.Value.ToString("d", CultureInfo.InvariantCulture) #></td>
		<td style="padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;">
			<# double frequency = (double)countPerSeverityState.Value /(double) SummaryReportDataObject.CountProfilesTested;
			if (frequency > 0) { #>
			<#= frequency.ToString("P") #>
			<# } #>
		</td>
	</tr>
	<# } #>
	</table>
	<br/>
	<br/>
	<table style="border:solid 2px lightgrey;border-collapse:collapse;">
	<tr>
		<th style="background-color:lightgrey;">Observation Type</th>
		<th style="background-color:lightgrey;">Count</th>
	</tr>
	<# if(SummaryReportDataObject.ByTestNameCountByObservationType.ContainsKey(testName)) {
	var sortedDictionary2 =SummaryReportDataObject.ByTestNameCountByObservationType[testName].OrderByDescending(x => x.Value).ToDictionary(x => x.Key, x => x.Value);
	foreach (KeyValuePair<ObservationLabel,int> countPerObservationType in sortedDictionary2) {
		if(countPerObservationType.Value > 0) { #>
	<tr>
		<td style="padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;"><#= LogManager.GetDescription(countPerObservationType.Key) #></td>
		<td style="padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;"><#= countPerObservationType.Value.ToString("d", CultureInfo.InvariantCulture) #></td>
	</tr>
	<# } } } #>
</table>
<# } #>
</body>
</html>
