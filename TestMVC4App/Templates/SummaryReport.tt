<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="TestMVC4App.Models" #>
<#@ parameter 
	name="SummaryReportDataObject" 
	type="TestMVC4App.Templates.SharedSummaryReportData" #>
<html>
<head></head>
<body>
	<h1 id="top">Summary Report</h1>
	<hr/>
	<h2>Overview</h2>
	<p>Count of user profiles tested : <#= SummaryReportDataObject.CountProfilesTested.ToString("{0:D}", CultureInfo.InvariantCulture) #><br/>
	Total count of tests run : <#= SummaryReportDataObject.CountTestsRun.ToString("{0:D}", CultureInfo.InvariantCulture) #><br/>
	Count of tests per user profile : <#= SummaryReportDataObject.CountTestsPerUser.ToString("{0:D}", CultureInfo.InvariantCulture) #><br/>
	Count of user profiles free from any kind of warning : <#= SummaryReportDataObject.CountProfilesWithoutWarnings.ToString("{0:D}", CultureInfo.InvariantCulture) #><br/>
	Duration : <#= SummaryReportDataObject.Duration.ToString("hh'h: 'mm'mn:'ss's:'FFFFFFF") #></p>
	<br/>
	<table style="border:solid 2px lightgrey;border-collapse:collapse;">
		<tr>
		<th style="background-color:lightgrey;">Result</th>
		<th style="background-color:lightgrey;">Count</th>
		<th style="background-color:lightgrey;">Description</th>
		</tr>
		<# foreach (KeyValuePair<ResultSeverityType,int> countPerSeverity in SummaryReportDataObject.CountBySeverity) { #>
		<tr>
			<# switch (countPerSeverity.Key) {
			case ResultSeverityType.FALSE_POSITIVE : #>
		<td style="padding: 10px;background-color: green;color:white;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverity.Key #>
			<# break;
			case ResultSeverityType.WARNING: #>
		<td style="padding: 10px;background-color: beige;color:black;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverity.Key #>
			<# break;
			case ResultSeverityType.ERROR_WITH_EXPLANATION: #>
		<td style="padding: 10px;background-color: orange;color:white;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverity.Key #>
			<# break;
			case ResultSeverityType.ERROR: #>
		<td style="padding: 10px;background-color: Red;color:white;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverity.Key #>
			<# break;
			default: #>
		<td style="padding: 10px;color:black;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverity.Key #>
			<# break;
		} #>
		</td>
		<td style="padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;"><#= countPerSeverity.Value.ToString("{0:D}", CultureInfo.InvariantCulture) #></td>
		<td style="padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;color:darkgrey;"><#= LogManager.GetDescription(countPerSeverity.Key) #></td>
	</tr>
	<# } #>
	</table>
	<br/>
	<br/>
	<table style="border:solid 2px lightgrey;border-collapse:collapse;">
	<tr>
		<th style="background-color:lightgrey;">Identified Data Behavior</th>
		<th style="background-color:lightgrey;">Count</th>
	</tr>
	<# var sortedDictionary = SummaryReportDataObject.CountByIdentifiedDataBehavior.OrderByDescending(x => x.Value).ToDictionary(x => x.Key, x => x.Value);
	foreach (KeyValuePair<IdentifiedDataBehavior,int> countPerIdentifiedDataBehavior in sortedDictionary) {
		if(countPerIdentifiedDataBehavior.Value > 0) { #>
	<tr>
		<td style="padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;"><#= LogManager.GetDescription(countPerIdentifiedDataBehavior.Key) #></td>
		<td style="padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;"><#= countPerIdentifiedDataBehavior.Value.ToString("{0:D}", CultureInfo.InvariantCulture) #></td>
	</tr>
	<# } } #>
	</table>
	<br/>
	<br/>
	<br/>
	<hr/>
	<table style="border:solid 2px lightgrey;border-collapse:collapse;">
	<tr>
	<th style="background-color:lightgrey;">Test Name</th>
	<th style="background-color:lightgrey;">Success</th>
	<th style="background-color:lightgrey;">Sample Data</th>
	<th style="background-color:lightgrey;">More Info</th>
	</tr>
	<# foreach (string testName in SummaryReportDataObject.TestNames) { #>
	<tr>
		<td style="padding: 10px;color:black;border-width:2px;border-color:lightgrey;border-style:solid;"><#= testName #></td>
		<td style="padding: 10px;color:black;border-width:2px;border-color:lightgrey;border-style:solid;">
			<# double countTotalNotErrors = 0;
			foreach (KeyValuePair<ResultSeverityType,int> countPerSeverity in SummaryReportDataObject.CountBySeverity_ByTestName[testName]) {
				if(countPerSeverity.Key == ResultSeverityType.SUCCESS || countPerSeverity.Key == ResultSeverityType.WARNING || countPerSeverity.Key == ResultSeverityType.FALSE_POSITIVE) {
					countTotalNotErrors += countPerSeverity.Value;
			} }
			double frequencyNoErrors = countTotalNotErrors /(double) SummaryReportDataObject.CountProfilesTested; #>
			<#= frequencyNoErrors.ToString("P") #>
		</td>
		<td style="padding: 10px;color:black;border-width:2px;border-color:lightgrey;border-style:solid;width: 40%;">
			<# if(SummaryReportDataObject.SampleData_ByTestName.ContainsKey(testName)) { #>
			<#= SummaryReportDataObject.SampleData_ByTestName[testName] #>
			<# } #>
		</td> 
		<td style="padding: 10px;color:black;border-width:2px;border-color:lightgrey;border-style:solid;">
			<a href="#<#= testName #>">Test Overview</a><br/>
			<a href="<#= testName #><#= SummaryReportDataObject.FileLinkEnd #>">Test Details</a>
		</td>
	</tr>
	<# } #>
	</table>
	<br/>
	<# foreach (string testName in SummaryReportDataObject.TestNames) { #>
	<hr/>
	<p><a href="#top">Back to top</a></p>
	<h2><a id="#<#= testName #>"><#= testName #></a></h2>
	<table style="border:solid 2px lightgrey;border-collapse:collapse;">
	<tr>
		<th style="background-color:lightgrey;">Result Severity</th>
		<th style="background-color:lightgrey;">Count</th>
		<th style="background-color:lightgrey;">Frequency</th>
	</tr>
	<# foreach (KeyValuePair<ResultSeverityType,int> countPerSeverity in SummaryReportDataObject.CountBySeverity_ByTestName[testName]) { #>
	<tr>
	<# switch (countPerSeverity.Key) {
		case ResultSeverityType.FALSE_POSITIVE : #>
		<td style="padding: 10px;background-color: green;color:white;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverity.Key #>
		<# break;
		case ResultSeverityType.WARNING: #>
		<td style="padding: 10px;background-color: beige;color:black;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverity.Key #>
		<# break;
		case ResultSeverityType.ERROR_WITH_EXPLANATION: #>
		<td style="padding: 10px;background-color: orange;color:white;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverity.Key #>
		<# break;
		case ResultSeverityType.ERROR: #>
		<td style="padding: 10px;background-color: Red;color:white;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverity.Key #>
		<# break;
		default: #>
		<td style="padding: 10px;color:black;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverity.Key #>
		<# break;
	} #>
		</td>
		<td style="padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;"><#= countPerSeverity.Value.ToString("{0:D}", CultureInfo.InvariantCulture) #></td>
		<td style="padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;">
			<# double frequency = (double)countPerSeverity.Value /(double) SummaryReportDataObject.CountProfilesTested;
			if (frequency > 0) { #>
			<#= frequency.ToString("P") #>
			<# } #>
		</td>
	</tr>
	<# } #>
	</table>
	<br/>
	<br/>
	<table style="border:solid 2px lightgrey;border-collapse:collapse;">
	<tr>
		<th style="background-color:lightgrey;">Identified Data Behavior</th>
		<th style="background-color:lightgrey;">Count</th>
	</tr>
	<# if(SummaryReportDataObject.CountByIdentifiedDataBehavior_ByTestName.ContainsKey(testName)) {
	var sortedDictionary2 =SummaryReportDataObject.CountByIdentifiedDataBehavior_ByTestName[testName].OrderByDescending(x => x.Value).ToDictionary(x => x.Key, x => x.Value);
	foreach (KeyValuePair<IdentifiedDataBehavior,int> countPerIdentifiedDataBehavior in sortedDictionary2) {
		if(countPerIdentifiedDataBehavior.Value > 0) { #>
	<tr>
		<td style="padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;"><#= LogManager.GetDescription(countPerIdentifiedDataBehavior.Key) #></td>
		<td style="padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;"><#= countPerIdentifiedDataBehavior.Value.ToString("{0:D}", CultureInfo.InvariantCulture) #></td>
	</tr>
	<# } } } #>
</table>
<# } #>
</body>
</html>
