<#@ template debug="true" language="C#"  #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="TestMVC4App.Models" #>
<#@ import namespace="HtmlDiff" #>
<#@ parameter 
	name="DetailedReportDataObject" 
	type="TestMVC4App.Templates.SharedDetailedReportData" #>
<tr>
	<td style="padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;"><b><#= DetailedReportDataObject.TestDescription #></b><br/>
		<a id="#<#= DetailedReportDataObject.UPI #>"><#= DetailedReportDataObject.TestName #></a>
	</td>
	<# switch (DetailedReportDataObject.Result) {
		case ResultSeverityType.FALSE_POSITIVE : #>
		<td style="padding: 10px;background-color: green;color:white;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= DetailedReportDataObject.Result #>
		<# break;
		case ResultSeverityType.WARNING: #>
		<td style="padding: 10px;background-color: beige;color:black;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= DetailedReportDataObject.Result #>
		<# break;
		case ResultSeverityType.ERROR_WITH_EXPLANATION: #>
		<td style="padding: 10px;background-color: orange;color:white;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= DetailedReportDataObject.Result #>
		<# break;
		case ResultSeverityType.ERROR: #>
		<td style="padding: 10px;background-color: Red;color:white;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= DetailedReportDataObject.Result #>
		<# break;
		default: #>
		<td style="padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= DetailedReportDataObject.Result #>
		<# break;
	} #>
	</td>
	<td style="width: 20%;padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;">
		<a href="<#= DetailedReportDataObject.OldUrl #>">Profile data of UPI <#= DetailedReportDataObject.UPI #></a><br/>
		<a href="<#= DetailedReportDataObject.NewUrl #>">User data of ID is <#= DetailedReportDataObject.UserId #></a>
	</td>
	<td style="width: 60%;padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;">
		<#= DetailedReportDataObject.ErrorMessage #>
		<br/><br/>
		<table style="border:solid 2px lightgrey;border-collapse:collapse;">
		<tr>
			<td style="background-color:lightgrey;">OLD SERVICE DATA <span style="color:red;">[<#=DetailedReportDataObject.OldValues.Count #>]</span></td>
			<td style="background-color:lightgrey;">NEW SERVICE DATA <span style="color:red;">[<#=DetailedReportDataObject.NewValues.Count #>]</span></td>
		</tr>
		<tr>
			<td style="border-right: 1px lightgrey solid;">
				<ul>
					<# if(DetailedReportDataObject.OldValues.Count > 0) {
					var potentialDuplicates = DetailedReportDataObject.OldValues.GroupBy(v => v).Where(g => g.Count() > 1).Select(g => g.Key);
					foreach (string oldValue in DetailedReportDataObject.OldValues) { #>
					<li><# if(!string.IsNullOrEmpty(oldValue)) { #><#= oldValue #>
					<# if(!DetailedReportDataObject.NewValues.Contains(oldValue)) { #><span style="color:purple;">[MISSING]</span><# } #>
					<# if(potentialDuplicates.Contains(oldValue)) { #><span style="color:pink;">[DUPLICATE]</span><# } #>
					<# } else { #>NULL<# } #></li>
					<# } } #>
				</ul>
			</td>
			<td>
				<ul>
					<# if(DetailedReportDataObject.NewValues.Count > 0) {
					var potentialDuplicates = DetailedReportDataObject.NewValues.GroupBy(v => v).Where(g => g.Count() > 1).Select(g => g.Key);
					foreach (string newValue in DetailedReportDataObject.NewValues) { #>
					<li><# if(!string.IsNullOrEmpty(newValue)) { #>
					<# string newValueToDisplay = newValue;
					if(DetailedReportDataObject.OldValues.Count <=1 && DetailedReportDataObject.NewValues.Count <= 1) {
						string oldValue = string.Empty;
						if(DetailedReportDataObject.OldValues.Count > 0) { oldValue = DetailedReportDataObject.OldValues.First(); }
						HtmlDiff diffHelper = new HtmlDiff(oldValue, newValue);
						newValueToDisplay = diffHelper.Build();
					} #>
					<#= newValueToDisplay #>
					<# if(!DetailedReportDataObject.OldValues.Contains(newValue)) { #><span style="color:purple;">[MISSING]</span><# } #>
					<# if(potentialDuplicates.Contains(newValue)) { #><span style="color:pink;">[DUPLICATE]</span><# } #>
					<# } else { #>NULL<# } #></li>
					<# } } #>
				</ul>
			</td>
		</tr>
		</table>
	</td>
	<td style="width: 30%;padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;">
	<p>Duration : <#= DetailedReportDataObject.Duration.ToString("mm'mn:'ss's:'FFFFFFF") #></p>
	<br/>
	<ul>
	<# if(DetailedReportDataObject.IdentifiedDataBehaviors != null) {
		foreach(var observation in DetailedReportDataObject.IdentifiedDataBehaviors) { #>
			<li><#= LogManager.GetDescription(observation) #></li><br/>
	<# } } #>
		</ul>
	</td>
</tr>