<#@ template debug="true" language="C#"  #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="TestMVC4App.Models" #>
<#@ import namespace="HtmlDiff" #>
<#@ parameter 
	name="DetailedReportDataObject" 
	type="TestMVC4App.Templates.SharedDetailedReportData" #>
<tr>
	<td class="td_main"><b><#= DetailedReportDataObject.TestDescription #></b><br/>
		<a id="<#= DetailedReportDataObject.UPI #>"><#= DetailedReportDataObject.TestName #></a>
	</td>
	<# switch (DetailedReportDataObject.Result) {
		case ResultSeverityType.FALSE_POSITIVE : #>
		<td class="td_main false_positive">
		<# break;
		case ResultSeverityType.WARNING: #>
		<td class="td_main warning">
		<# break;
		case ResultSeverityType.WARNING_NO_DATA: #>
		<td class="td_main warning_no_data">
		<# break;
		case ResultSeverityType.ERROR_WITH_EXPLANATION: #>
		<td class="td_main error_with_explanation">
		<# break;
		case ResultSeverityType.ERROR: #>
		<td class="td_main error">
		<# break;
		default: #>
		<td class="td_main success">
		<# break;
	} #>
	<#= DetailedReportDataObject.Result #></td>
	<td class="td_main" style="width: 20%;">
		<a href="<#= DetailedReportDataObject.OldUrl #>">Profile data of UPI <#= DetailedReportDataObject.UPI #></a><br/>
		<a href="<#= DetailedReportDataObject.NewUrl #>">User data of ID is <#= DetailedReportDataObject.UserId #></a>
	</td>
	<td class="td_main" style="width: 60%;">
		<#= DetailedReportDataObject.ErrorMessage #>
		<br/><br/>
		<table class="table_main">
		<tr>
			<td class="th_main">OLD SERVICE DATA <# if(DetailedReportDataObject.OldOrganizationValues.Count <= 0) { #><span class="error_color">[COUNT ELEMENTS: <#=DetailedReportDataObject.OldValues.Count #>]</span><# } #></td>
			<td class="th_main">NEW SERVICE DATA <# if(DetailedReportDataObject.NewOrganizationValues.Count <= 0) { #><span class="error_color">[COUNT ELEMENTS: <#=DetailedReportDataObject.NewValues.Count #>]</span><# } #></td>
		</tr>
		<tr>
			<td class="td_main">
				<ul>
					<# if(DetailedReportDataObject.OldOrganizationValues.Count > 0) {
					foreach (OrganizationTreeDescriptor element in DetailedReportDataObject.OldOrganizationValues) {
						if (element.Depth < 0) { #>
							<li>[DEPTH NOT ASSIGNED] <#= element.Name #> (<#= element.ID #>)
							<# if(element.IsMissing) { #><span class="missing">[MISSING IN NEW SERVICE]</span><# } #>
							<# if(element.IsDuplicate) { #><span class="duplicate">[DUPLICATE]</span><# } #>
						</li>
						<# } } } #>
					<br/><br/>
					<# if(DetailedReportDataObject.OldTreeRoot != null) {
					var flattenedTree = new OrganizationTreeDescriptor[] { DetailedReportDataObject.OldTreeRoot }.SelectNestedChildren(t => t.Children).ToList();
					foreach (OrganizationTreeDescriptor element in flattenedTree) {
						StringBuilder sb = new StringBuilder();
						for (int i = 0; i < element.Depth; i++) { sb.Append("- "); }
						if ((DetailedReportDataObject.TreeComparisonIndexError > 0 && element.Depth == DetailedReportDataObject.TreeComparisonIndexError) || element.IsImportedFromNewService) { sb.Append("<span class=\"tree_depth_mismatch\">"); }
						sb.Append("[DEPTH " + element.Depth + "] " + element.Name + " (" + element.ID + ")");
						if (DetailedReportDataObject.TreeComparisonIndexError > 0 && element.Depth == DetailedReportDataObject.TreeComparisonIndexError) { sb.Append(" [MISMATCH WITH NEW SERVICE]</span>"); }
						if (element.IsImportedFromNewService) { sb.Append(" [IMPORTED FROM NEW SERVICE]</span>"); } #>
					<li><#= sb #>
					<# if(element.IsMissing) { #><span class="missing">[MISSING IN NEW SERVICE]</span><# } #>
					<# if(element.IsDuplicate) { #><span class="duplicate">[DUPLICATE]</span><# } #>
					</li>
					<# } } else if(DetailedReportDataObject.OldValues.Count > 0) {
					var potentialDuplicates = DetailedReportDataObject.OldValues.GroupBy(v => v).Where(g => g.Count() > 1).Select(g => g.Key);
					foreach (string oldValue in DetailedReportDataObject.OldValues) { #>
					<li><# if(!string.IsNullOrEmpty(oldValue)) { #><#= oldValue #>
					<# if(!DetailedReportDataObject.NewValues.Contains(oldValue)) { #><span class="missing">[MISSING IN NEW SERVICE]</span><# } #>
					<# if(potentialDuplicates.Contains(oldValue)) { #><span class="duplicate">[DUPLICATE]</span><# } #>
					<# } else { #>NULL<# } #></li>
					<# } } #>
				</ul>
			</td>
			<td class="td_main">
				<ul>
					<# if(DetailedReportDataObject.NewOrganizationValues.Count > 0) {
					foreach (OrganizationTreeDescriptor element in DetailedReportDataObject.NewOrganizationValues) {
						if (element.Depth < 0) { #>
							<li>[DEPTH NOT ASSIGNED] <#= element.Name #> (<#= element.ID #>)
							<# if(element.IsMissing) { #><span class="missing">[MISSING IN OLD SERVICE]</span><# } #>
							<# if(element.IsDuplicate) { #><span class="duplicate">[DUPLICATE]</span><# } #>
							</li><#
					} } } #>
					<br/><br/>
					<# if (DetailedReportDataObject.NewTreeRoot != null) {
					var flattenedTree2 = new OrganizationTreeDescriptor[] { DetailedReportDataObject.NewTreeRoot }.SelectNestedChildren(t => t.Children).ToList();
					foreach (OrganizationTreeDescriptor element in flattenedTree2) {
						StringBuilder sb = new StringBuilder();
						for (int i = 0; i < element.Depth; i++) { sb.Append("- "); }
						if (DetailedReportDataObject.TreeComparisonIndexError > 0 && element.Depth == DetailedReportDataObject.TreeComparisonIndexError) { sb.Append("<span class=\"tree_depth_mismatch\">"); }
						sb.Append("[DEPTH " + element.Depth + "] " + element.Name + " (" + element.ID + ")");
						if (DetailedReportDataObject.TreeComparisonIndexError > 0 && element.Depth == DetailedReportDataObject.TreeComparisonIndexError) { sb.Append(" [MISMATCH WITH OLD SERVICE]</span>"); }
						 #>
					<li><#= sb #>
					<# if(element.IsMissing) { #><span class="missing">[MISSING IN OLD SERVICE]</span><# } #>
					<# if(element.IsDuplicate) { #><span class="duplicate">[DUPLICATE]</span><# } #>
					</li>
					<# } } else if(DetailedReportDataObject.NewValues.Count > 0) {
					var potentialDuplicates = DetailedReportDataObject.NewValues.GroupBy(v => v).Where(g => g.Count() > 1).Select(g => g.Key);
					foreach (string newValue in DetailedReportDataObject.NewValues) { #>
					<li><# if(!string.IsNullOrEmpty(newValue)) { #>
					<# string newValueToDisplay = newValue;
					if(DetailedReportDataObject.OldValues.Count <= 1 && DetailedReportDataObject.NewValues.Count <= 1) {
						string oldValue = string.Empty;
						if(DetailedReportDataObject.OldValues.Count > 0) { oldValue = DetailedReportDataObject.OldValues.First(); if(oldValue == null) { oldValue = string.Empty; } }
						HtmlDiff diffHelper = new HtmlDiff(oldValue, newValue);
						newValueToDisplay = diffHelper.Build();
					} #>
					<#= newValueToDisplay #>
					<# if(!DetailedReportDataObject.OldValues.Contains(newValue)) { #><span class="missing">[MISSING IN OLD SERVICE]</span><# } #>
					<# if(potentialDuplicates.Contains(newValue)) { #><span class="duplicate">[DUPLICATE]</span><# } #>
					<# } else { #>NULL<# } #></li>
					<# } } #>
				</ul>
			</td>
		</tr>
		</table>
	</td>
	<td class="td_main" style="width: 30%;">
	<p>Duration : <#= DetailedReportDataObject.Duration.ToString("mm'mn:'ss's:'FFFFFFF") #></p>
	<br/>
	<ul>
	<# if(DetailedReportDataObject.IdentifiedDataBehaviors != null) {
		foreach(var observation in DetailedReportDataObject.IdentifiedDataBehaviors) { #>
			<li><#= observation #></li><br/>
	<# } } #>
		</ul>
	</td>
</tr>