<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="TestMVC4App.Models" #>
<#@ parameter 
	name="StatsReport" 
	type="TestMVC4App.Templates.OverviewStatsReport" #>
	<html>
	<head></head>
	<body>
	<h1>Overview Report</h1>
	<hr/>
	<h2>Global</h2>
	<p>Count of user profiles tested : <#= StatsReport.CountProfilesTested #></p>
	<p>Total count of tests run : <#= StatsReport.CountTestsRun #></p>
	<p>Count of tests per user profile : <#= StatsReport.CountTestsPerUser #></p>
	<p>Count of user profiles free from any kind of warning : <#= StatsReport.CountProfilesWithoutWarnings #></p>
	<p>Total count of errors : <#= StatsReport.CountErrors #></p>
	<br/>
	<table style="border:solid 2px lightgrey;border-collapse:collapse;">
	<tr>
	<th style="background-color:lightgrey;">Severity of Failure</th>
	<th style="background-color:lightgrey;">Count</th>
	<th style="background-color:lightgrey;">Description of the category</th>
	</tr>

	<# foreach (KeyValuePair<SeverityLevel,int> countPerSeverity in StatsReport.OverviewCountBySeverityLevel)
	{
	#>
	<tr>

		<# switch (countPerSeverity.Key)
	{
		case SeverityLevel.FALSE_POSITIVE :
		#>
		<td style="padding: 10px;background-color: green;color:white;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverity.Key #>
		<#
		break;
		case SeverityLevel.WARNING:
		#>
		<td style="padding: 10px;background-color: beige;color:black;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverity.Key #>
		<#
		break;
		case SeverityLevel.ERROR_WITH_EXPLANATION:
		#>
		<td style="padding: 10px;background-color: orange;color:white;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverity.Key #>
		<#
		break;
		case SeverityLevel.ERROR:
		#>
		<td style="padding: 10px;background-color: Red;color:white;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverity.Key #>
		<#
		break;
		default:
		#>
		<td style="padding: 10px;color:black;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverity.Key #>
		<#
		break;
	}
	#>
	</td>
	<td style="padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;"><#= countPerSeverity.Value #></td>
	<td style="padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;color:darkgrey;"><#= AssertFailedReport.GetDescription(countPerSeverity.Key) #></td>
	</tr>
	<#
	} #>

	</table>
	<br/>
	<p>There is a one-to-one relationship between a Failure and a user profile. A given test is run once for the given user profile.</p>
	<br/>
	<table style="border:solid 2px lightgrey;border-collapse:collapse;">
	<tr>
	<th style="background-color:lightgrey;">Observation Type</th>
	<th style="background-color:lightgrey;">Count</th>
	</tr>

	<# 
	var sortedDictionary = StatsReport.OverviewCountByObservationType.OrderByDescending(x => x.Value).ToDictionary(x => x.Key, x => x.Value);
	foreach (KeyValuePair<ObservationLabel,int> countPerObservationType in sortedDictionary)
	{
	#>
	<tr>
	<td style="padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;"><#= AssertFailedReport.GetDescription(countPerObservationType.Key) #></td>
	<td style="padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;"><#= countPerObservationType.Value #></td>
	</tr>
	<#
	} #>

	</table>
	<br/>
	<p>There is no straightforward relationship between an observation and a Failure. An observation is made regardless of the test result. 
	A given observation can only be made once for a given test on a given user profile.</p>
	<br/>
	<br/>

	<# foreach (string testName in StatsReport.TestNames)
	{
	#>
	<hr/>
		<h2><#= testName #></h2>

	<table style="border:solid 2px lightgrey;border-collapse:collapse;">
	<tr>
	<th style="background-color:lightgrey;">Severity of Failure</th>
	<th style="background-color:lightgrey;">Count</th>
	<th style="background-color:lightgrey;">Frequency</th>
	</tr>

	<# foreach (KeyValuePair<SeverityLevel,int> countPerSeverity in StatsReport.ByTestNameCountBySeverityLevel[testName])
	{
	#>
	<tr>

		<# switch (countPerSeverity.Key)
	{
		case SeverityLevel.FALSE_POSITIVE :
		#>
		<td style="padding: 10px;background-color: green;color:white;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverity.Key #>
		<#
		break;
		case SeverityLevel.WARNING:
		#>
		<td style="padding: 10px;background-color: beige;color:black;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverity.Key #>
		<#
		break;
		case SeverityLevel.ERROR_WITH_EXPLANATION:
		#>
		<td style="padding: 10px;background-color: orange;color:white;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverity.Key #>
		<#
		break;
		case SeverityLevel.ERROR:
		#>
		<td style="padding: 10px;background-color: Red;color:white;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverity.Key #>
		<#
		break;
		default:
		#>
		<td style="padding: 10px;color:black;border-width:2px;border-color:lightgrey;border-style:solid;font-weight:bold;"><#= countPerSeverity.Key #>
		<#
		break;
	}
	#>
	</td>
	<td style="padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;"><#= countPerSeverity.Value #></td>
	<td style="padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;">
	<# double frequency = (double)countPerSeverity.Value /(double) StatsReport.CountProfilesTested;
	if (frequency > 0)
	{
	#>
	<#= frequency.ToString("P") #>
	<#
	} #>
	</td>
	</tr>
	<#
	} #>

	</table>
	<br/>
	<br/>
	<table style="border:solid 2px lightgrey;border-collapse:collapse;">
	<tr>
	<th style="background-color:lightgrey;">Observation Type</th>
	<th style="background-color:lightgrey;">Count</th>
	</tr>

	<# 
	if(StatsReport.ByTestNameCountByObservationType.ContainsKey(testName))
	{
	var sortedDictionary2 =StatsReport.ByTestNameCountByObservationType[testName].OrderByDescending(x => x.Value).ToDictionary(x => x.Key, x => x.Value);
	foreach (KeyValuePair<ObservationLabel,int> countPerObservationType in sortedDictionary2)
	{
		if(countPerObservationType.Value > 0)
		{
	#>
	<tr>
	<td style="padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;"><#= AssertFailedReport.GetDescription(countPerObservationType.Key) #></td>
	<td style="padding: 10px;border-width:2px;border-color:lightgrey;border-style:solid;"><#= countPerObservationType.Value #></td>
	</tr>
	<#
		}
	}
	} #>

	</table>
	<#
	}
	#>
	</body>
	</html>
