<#@ template debug="true" language="C#"  #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="TestMVC4App.Models" #>
<#@ import namespace="HtmlDiff" #>
<#@ parameter 
	name="SharedDataObject" 
	type="TestMVC4App.Templates.DetailedReportSharedData" #>
<tr>
	<td class="td_main"><b><#= SharedDataObject.TestDescription #></b><br/>
		<a id="<#= SharedDataObject.UPI #>"><#= SharedDataObject.TestName #></a>
	</td>
	<# switch (SharedDataObject.Result) {
		case EnumResultSeverityType.FALSE_POSITIVE : #>
		<td class="td_main false_positive">
		<# break;
		case EnumResultSeverityType.WARNING:
		case EnumResultSeverityType.WARNING_ONLY_NEW: #>
		<td class="td_main warning">
		<# break;
		case EnumResultSeverityType.WARNING_NO_DATA: #>
		<td class="td_main warning_no_data">
		<# break;
		case EnumResultSeverityType.ERROR_WITH_EXPLANATION:
		case EnumResultSeverityType.ERROR_ONLY_OLD: #>
		<td class="td_main error_with_explanation">
		<# break;
		case EnumResultSeverityType.ERROR: #>
		<td class="td_main error">
		<# break;
		default: #>
		<td class="td_main success">
		<# break;
	} #>
	<#= SharedDataObject.Result #></td>
	<td class="td_main">
		<a href="<#= SharedDataObject.OldUrl #>">Profile data of UPI <#= SharedDataObject.UPI #></a><br/>
		<a href="<#= SharedDataObject.NewUrl #>">User data of ID is <#= SharedDataObject.UserId #></a>
	</td>
	<td class="td_main">
		<#= SharedDataObject.ErrorMessage #>
		<br/><br/>
		<table class="table_main">
		<tr>
			<td class="th_main">OLD SERVICE DATA</td>
			<td class="th_main">NEW SERVICE DATA</td>
		</tr>
		<tr>
			<td class="td_main">
				<ul>
					<# if(SharedDataObject.OldOrganizationValues.Count() > 0) {
					foreach (OrganizationTreeDescriptor element in SharedDataObject.OldOrganizationValues) {
						if (element.Depth < 0) { #>
							<li>[DEPTH NOT ASSIGNED] <#= element.Name #> (<#= element.ID #>)
							<# if(element.IsMissing) { #><span class="missing">[MISSING IN NEW SERVICE]</span><# } #>
							<# if(element.IsDuplicate) { #><span class="duplicate">[DUPLICATE]</span><# } #>
						</li>
						<# } } } #>
					<br/><br/>
					<# if(SharedDataObject.OldTreeRoot != null) {
					var flattenedTree = new OrganizationTreeDescriptor[] { SharedDataObject.OldTreeRoot }.SelectNestedChildren(t => t.Children).ToList();
					foreach (OrganizationTreeDescriptor element in flattenedTree) {
						StringBuilder sb = new StringBuilder();
						sb.Append("[DEPTH " + element.Depth + "] ");
						for (int i = 0; i < element.Depth; i++) { sb.Append("- "); }
						if ((SharedDataObject.TreeComparisonIndexError > 0 && element.Depth == SharedDataObject.TreeComparisonIndexError) || element.IsImportedFromNewService || element.UsedMoreThanOnce || element.WasOnlyOption) { sb.Append("<span class=\"tree_depth_mismatch\">"); }
						sb.Append(element.Name + " (" + element.ID + ")");
						if (SharedDataObject.TreeComparisonIndexError > 0 && element.Depth == SharedDataObject.TreeComparisonIndexError) { sb.Append(" [DEPTH COUNT MISMATCH WITH NEW SERVICE]"); }
						if (element.IsImportedFromNewService) { sb.Append(" [IMPORTED FROM NEW SERVICE]"); }
						if (element.UsedMoreThanOnce) { sb.Append(" [USED MORE THAN ONCE]"); }
						if (element.WasOnlyOption) { sb.Append(" [ONLY OPTION]"); }
						if ((SharedDataObject.TreeComparisonIndexError > 0 && element.Depth == SharedDataObject.TreeComparisonIndexError) || element.IsImportedFromNewService || element.UsedMoreThanOnce || element.WasOnlyOption) { sb.Append("</span>"); } #>
					<li><#= sb #>
					<# if(element.IsMissing) { #><span class="missing">[MISSING IN NEW SERVICE]</span><# } #>
					<# if(element.IsDuplicate) { #><span class="duplicate">[DUPLICATE]</span><# } #>
					</li>
					<# } } #>
				</ul>
			</td>
			<td class="td_main">
				<ul>
					<# if(SharedDataObject.NewOrganizationValues.Count() > 0) {
					foreach (OrganizationTreeDescriptor element in SharedDataObject.NewOrganizationValues) {
						if (element.Depth < 0) { #>
							<li>[DEPTH NOT ASSIGNED] <#= element.Name #> (<#= element.ID #>)
							<# if(element.IsMissing) { #><span class="missing">[MISSING IN OLD SERVICE]</span><# } #>
							<# if(element.IsDuplicate) { #><span class="duplicate">[DUPLICATE]</span><# } #>
							</li><#
					} } } #>
					<br/><br/>
					<# if (SharedDataObject.NewTreeRoot != null) {
					var flattenedTree2 = new OrganizationTreeDescriptor[] { SharedDataObject.NewTreeRoot }.SelectNestedChildren(t => t.Children).ToList();
					foreach (OrganizationTreeDescriptor element in flattenedTree2) {
						StringBuilder sb = new StringBuilder();
						sb.Append("[DEPTH " + element.Depth + "] ");
						for (int i = 0; i < element.Depth; i++) { sb.Append("- "); }
						if (SharedDataObject.TreeComparisonIndexError > 0 && element.Depth == SharedDataObject.TreeComparisonIndexError) { sb.Append("<span class=\"tree_depth_mismatch\">"); }
						sb.Append(element.Name + " (" + element.ID + ")");
						if (SharedDataObject.TreeComparisonIndexError > 0 && element.Depth == SharedDataObject.TreeComparisonIndexError) { sb.Append(" [MISMATCH WITH OLD SERVICE]</span>"); }
						 #>
					<li><#= sb #>
					<# if(element.IsMissing) { #><span class="missing">[MISSING IN OLD SERVICE]</span><# } #>
					<# if(element.IsDuplicate) { #><span class="duplicate">[DUPLICATE]</span><# } #>
					</li>
					<# } } #>
				</ul>
			</td>
		</tr>
		</table>
	</td>
	<td class="td_main">
	<p>Duration : <#= SharedDataObject.Duration.ToString("mm'mn:'ss's:'FFFFFFF") #></p>
	<br/>
	<ul>
	<# if(SharedDataObject.IdentifiedDataBehaviors != null) {
		foreach(var observation in SharedDataObject.IdentifiedDataBehaviors) { #>
			<li><#= observation #></li><br/>
	<# } } #>
		</ul>
	</td>
</tr>