<#@ template debug="true" language="C#"  #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="TestMVC4App.Models" #>
<#@ import namespace="HtmlDiff" #>
<#@ parameter 
	name="SharedDataObject" 
	type="TestMVC4App.Templates.DetailedReportSharedData" #>
<tr>
	<td class="td_main"><b><#= SharedDataObject.TestDescription #></b><br/>
		<a id="<#= SharedDataObject.UPI #>"><#= SharedDataObject.TestName #></a>
	</td>
	<# switch (SharedDataObject.Result) {
		case EnumResultSeverityType.FALSE_POSITIVE : #>
		<td class="td_main false_positive">
		<# break;
		case EnumResultSeverityType.WARNING:
		case EnumResultSeverityType.WARNING_ONLY_NEW: #>
		<td class="td_main warning">
		<# break;
		case EnumResultSeverityType.WARNING_NO_DATA: #>
		<td class="td_main warning_no_data">
		<# break;
		case EnumResultSeverityType.ERROR_WITH_EXPLANATION:
		case EnumResultSeverityType.ERROR_ONLY_OLD: #>
		<td class="td_main error_with_explanation">
		<# break;
		case EnumResultSeverityType.ERROR: #>
		<td class="td_main error">
		<# break;
		default: #>
		<td class="td_main success">
		<# break;
	} #>
	<#= SharedDataObject.Result #></td>
	<td class="td_main">
		<a href="<#= SharedDataObject.OldUrl #>">Profile data of UPI <#= SharedDataObject.UPI #></a><br/>
		<a href="<#= SharedDataObject.NewUrl #>">User data of ID is <#= SharedDataObject.UserId #></a>
	</td>
	<td class="td_main">
		<#= SharedDataObject.ErrorMessage #>
		<br/><br/>
		<table class="table_main">
		<tr>
			<td class="th_main">OLD SERVICE DATA <span class="error_color">[COUNT ELEMENTS: <#=SharedDataObject.OldValues.Count() #>]</span></td>
			<td class="th_main">NEW SERVICE DATA <span class="error_color">[COUNT ELEMENTS: <#=SharedDataObject.NewValues.Count() #>]</span></td>
		</tr>
		<tr>
			<td class="td_main">
				<ul>
					<# if(SharedDataObject.OldValues.Count() > 0) {
					var potentialDuplicates = SharedDataObject.OldValues.GroupBy(v => v).Where(g => g.Count() > 1).Select(g => g.Key);
					foreach (string oldValue in SharedDataObject.OldValues) { #>
					<li><# if(!string.IsNullOrEmpty(oldValue)) { #><#= oldValue #>
					<# if(!SharedDataObject.NewValues.Contains(oldValue)) { #><span class="missing">[MISSING IN NEW SERVICE]</span><# } #>
					<# if(potentialDuplicates.Contains(oldValue)) { #><span class="duplicate">[DUPLICATE]</span><# } #>
					<# } else { #>NULL<# } #></li>
					<# } } #>
				</ul>
			</td>
			<td class="td_main">
				<ul>
					<# if(SharedDataObject.NewValues.Count > 0) {
					var potentialDuplicates = SharedDataObject.NewValues.GroupBy(v => v).Where(g => g.Count() > 1).Select(g => g.Key);
					foreach (string newValue in SharedDataObject.NewValues) { #>
					<li><# if(!string.IsNullOrEmpty(newValue)) { #>
					<# string newValueToDisplay = newValue;
					if(SharedDataObject.OldValues.Count <= 1 && SharedDataObject.NewValues.Count <= 1) {
						string oldValue = string.Empty;
						if(SharedDataObject.OldValues.Count > 0) { oldValue = SharedDataObject.OldValues.First(); if(oldValue == null) { oldValue = string.Empty; } }
						HtmlDiff diffHelper = new HtmlDiff(oldValue, newValue);
						newValueToDisplay = diffHelper.Build();
					} #>
					<#= newValueToDisplay #>
					<# if(!SharedDataObject.OldValues.Contains(newValue)) { #><span class="missing">[MISSING IN OLD SERVICE]</span><# } #>
					<# if(potentialDuplicates.Contains(newValue)) { #><span class="duplicate">[DUPLICATE]</span><# } #>
					<# } else { #>NULL<# } #></li>
					<# } } #>
				</ul>
			</td>
		</tr>
		</table>
	</td>
	<td class="td_main">
	<p>Duration : <#= SharedDataObject.Duration.ToString("mm'mn:'ss's:'FFFFFFF") #></p>
	<br/>
	<ul>
	<# if(SharedDataObject.IdentifiedDataBehaviors != null) {
		foreach(var observation in SharedDataObject.IdentifiedDataBehaviors) { #>
			<li><#= observation #></li><br/>
	<# } } #>
		</ul>
	</td>
</tr>